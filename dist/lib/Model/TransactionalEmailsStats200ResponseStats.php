<?php
/**
 * TransactionalEmailsStats200ResponseStats
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Model;

use \ArrayAccess;
use \StejskyTom\Ecomail\ObjectSerializer;

/**
 * TransactionalEmailsStats200ResponseStats Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionalEmailsStats200ResponseStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transactional_emails_stats_200_response_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'open_rate' => 'float',
        'click_rate' => 'float',
        'ctr' => 'float',
        'bounce_rate' => 'float',
        'count_injected' => 'float',
        'count_accepted' => 'float',
        'count_delivered' => 'float',
        'count_unique_rendered' => 'float',
        'count_rendered' => 'float',
        'count_clicked' => 'float',
        'count_unique_clicked' => 'float',
        'count_bounce' => 'float',
        'count_hard_bounce' => 'float',
        'count_soft_bounce' => 'float',
        'count_rejected' => 'float',
        'count_spam_complaint' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'open_rate' => null,
        'click_rate' => null,
        'ctr' => null,
        'bounce_rate' => null,
        'count_injected' => null,
        'count_accepted' => null,
        'count_delivered' => null,
        'count_unique_rendered' => null,
        'count_rendered' => null,
        'count_clicked' => null,
        'count_unique_clicked' => null,
        'count_bounce' => null,
        'count_hard_bounce' => null,
        'count_soft_bounce' => null,
        'count_rejected' => null,
        'count_spam_complaint' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'open_rate' => false,
        'click_rate' => false,
        'ctr' => false,
        'bounce_rate' => false,
        'count_injected' => false,
        'count_accepted' => false,
        'count_delivered' => false,
        'count_unique_rendered' => false,
        'count_rendered' => false,
        'count_clicked' => false,
        'count_unique_clicked' => false,
        'count_bounce' => false,
        'count_hard_bounce' => false,
        'count_soft_bounce' => false,
        'count_rejected' => false,
        'count_spam_complaint' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'open_rate' => 'open_rate',
        'click_rate' => 'click_rate',
        'ctr' => 'ctr',
        'bounce_rate' => 'bounce_rate',
        'count_injected' => 'count_injected',
        'count_accepted' => 'count_accepted',
        'count_delivered' => 'count_delivered',
        'count_unique_rendered' => 'count_unique_rendered',
        'count_rendered' => 'count_rendered',
        'count_clicked' => 'count_clicked',
        'count_unique_clicked' => 'count_unique_clicked',
        'count_bounce' => 'count_bounce',
        'count_hard_bounce' => 'count_hard_bounce',
        'count_soft_bounce' => 'count_soft_bounce',
        'count_rejected' => 'count_rejected',
        'count_spam_complaint' => 'count_spam_complaint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'open_rate' => 'setOpenRate',
        'click_rate' => 'setClickRate',
        'ctr' => 'setCtr',
        'bounce_rate' => 'setBounceRate',
        'count_injected' => 'setCountInjected',
        'count_accepted' => 'setCountAccepted',
        'count_delivered' => 'setCountDelivered',
        'count_unique_rendered' => 'setCountUniqueRendered',
        'count_rendered' => 'setCountRendered',
        'count_clicked' => 'setCountClicked',
        'count_unique_clicked' => 'setCountUniqueClicked',
        'count_bounce' => 'setCountBounce',
        'count_hard_bounce' => 'setCountHardBounce',
        'count_soft_bounce' => 'setCountSoftBounce',
        'count_rejected' => 'setCountRejected',
        'count_spam_complaint' => 'setCountSpamComplaint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'open_rate' => 'getOpenRate',
        'click_rate' => 'getClickRate',
        'ctr' => 'getCtr',
        'bounce_rate' => 'getBounceRate',
        'count_injected' => 'getCountInjected',
        'count_accepted' => 'getCountAccepted',
        'count_delivered' => 'getCountDelivered',
        'count_unique_rendered' => 'getCountUniqueRendered',
        'count_rendered' => 'getCountRendered',
        'count_clicked' => 'getCountClicked',
        'count_unique_clicked' => 'getCountUniqueClicked',
        'count_bounce' => 'getCountBounce',
        'count_hard_bounce' => 'getCountHardBounce',
        'count_soft_bounce' => 'getCountSoftBounce',
        'count_rejected' => 'getCountRejected',
        'count_spam_complaint' => 'getCountSpamComplaint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('open_rate', $data ?? [], null);
        $this->setIfExists('click_rate', $data ?? [], null);
        $this->setIfExists('ctr', $data ?? [], null);
        $this->setIfExists('bounce_rate', $data ?? [], null);
        $this->setIfExists('count_injected', $data ?? [], null);
        $this->setIfExists('count_accepted', $data ?? [], null);
        $this->setIfExists('count_delivered', $data ?? [], null);
        $this->setIfExists('count_unique_rendered', $data ?? [], null);
        $this->setIfExists('count_rendered', $data ?? [], null);
        $this->setIfExists('count_clicked', $data ?? [], null);
        $this->setIfExists('count_unique_clicked', $data ?? [], null);
        $this->setIfExists('count_bounce', $data ?? [], null);
        $this->setIfExists('count_hard_bounce', $data ?? [], null);
        $this->setIfExists('count_soft_bounce', $data ?? [], null);
        $this->setIfExists('count_rejected', $data ?? [], null);
        $this->setIfExists('count_spam_complaint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets open_rate
     *
     * @return float|null
     */
    public function getOpenRate()
    {
        return $this->container['open_rate'];
    }

    /**
     * Sets open_rate
     *
     * @param float|null $open_rate open_rate
     *
     * @return self
     */
    public function setOpenRate($open_rate)
    {
        if (is_null($open_rate)) {
            throw new \InvalidArgumentException('non-nullable open_rate cannot be null');
        }
        $this->container['open_rate'] = $open_rate;

        return $this;
    }

    /**
     * Gets click_rate
     *
     * @return float|null
     */
    public function getClickRate()
    {
        return $this->container['click_rate'];
    }

    /**
     * Sets click_rate
     *
     * @param float|null $click_rate click_rate
     *
     * @return self
     */
    public function setClickRate($click_rate)
    {
        if (is_null($click_rate)) {
            throw new \InvalidArgumentException('non-nullable click_rate cannot be null');
        }
        $this->container['click_rate'] = $click_rate;

        return $this;
    }

    /**
     * Gets ctr
     *
     * @return float|null
     */
    public function getCtr()
    {
        return $this->container['ctr'];
    }

    /**
     * Sets ctr
     *
     * @param float|null $ctr ctr
     *
     * @return self
     */
    public function setCtr($ctr)
    {
        if (is_null($ctr)) {
            throw new \InvalidArgumentException('non-nullable ctr cannot be null');
        }
        $this->container['ctr'] = $ctr;

        return $this;
    }

    /**
     * Gets bounce_rate
     *
     * @return float|null
     */
    public function getBounceRate()
    {
        return $this->container['bounce_rate'];
    }

    /**
     * Sets bounce_rate
     *
     * @param float|null $bounce_rate bounce_rate
     *
     * @return self
     */
    public function setBounceRate($bounce_rate)
    {
        if (is_null($bounce_rate)) {
            throw new \InvalidArgumentException('non-nullable bounce_rate cannot be null');
        }
        $this->container['bounce_rate'] = $bounce_rate;

        return $this;
    }

    /**
     * Gets count_injected
     *
     * @return float|null
     */
    public function getCountInjected()
    {
        return $this->container['count_injected'];
    }

    /**
     * Sets count_injected
     *
     * @param float|null $count_injected count_injected
     *
     * @return self
     */
    public function setCountInjected($count_injected)
    {
        if (is_null($count_injected)) {
            throw new \InvalidArgumentException('non-nullable count_injected cannot be null');
        }
        $this->container['count_injected'] = $count_injected;

        return $this;
    }

    /**
     * Gets count_accepted
     *
     * @return float|null
     */
    public function getCountAccepted()
    {
        return $this->container['count_accepted'];
    }

    /**
     * Sets count_accepted
     *
     * @param float|null $count_accepted count_accepted
     *
     * @return self
     */
    public function setCountAccepted($count_accepted)
    {
        if (is_null($count_accepted)) {
            throw new \InvalidArgumentException('non-nullable count_accepted cannot be null');
        }
        $this->container['count_accepted'] = $count_accepted;

        return $this;
    }

    /**
     * Gets count_delivered
     *
     * @return float|null
     */
    public function getCountDelivered()
    {
        return $this->container['count_delivered'];
    }

    /**
     * Sets count_delivered
     *
     * @param float|null $count_delivered count_delivered
     *
     * @return self
     */
    public function setCountDelivered($count_delivered)
    {
        if (is_null($count_delivered)) {
            throw new \InvalidArgumentException('non-nullable count_delivered cannot be null');
        }
        $this->container['count_delivered'] = $count_delivered;

        return $this;
    }

    /**
     * Gets count_unique_rendered
     *
     * @return float|null
     */
    public function getCountUniqueRendered()
    {
        return $this->container['count_unique_rendered'];
    }

    /**
     * Sets count_unique_rendered
     *
     * @param float|null $count_unique_rendered count_unique_rendered
     *
     * @return self
     */
    public function setCountUniqueRendered($count_unique_rendered)
    {
        if (is_null($count_unique_rendered)) {
            throw new \InvalidArgumentException('non-nullable count_unique_rendered cannot be null');
        }
        $this->container['count_unique_rendered'] = $count_unique_rendered;

        return $this;
    }

    /**
     * Gets count_rendered
     *
     * @return float|null
     */
    public function getCountRendered()
    {
        return $this->container['count_rendered'];
    }

    /**
     * Sets count_rendered
     *
     * @param float|null $count_rendered count_rendered
     *
     * @return self
     */
    public function setCountRendered($count_rendered)
    {
        if (is_null($count_rendered)) {
            throw new \InvalidArgumentException('non-nullable count_rendered cannot be null');
        }
        $this->container['count_rendered'] = $count_rendered;

        return $this;
    }

    /**
     * Gets count_clicked
     *
     * @return float|null
     */
    public function getCountClicked()
    {
        return $this->container['count_clicked'];
    }

    /**
     * Sets count_clicked
     *
     * @param float|null $count_clicked count_clicked
     *
     * @return self
     */
    public function setCountClicked($count_clicked)
    {
        if (is_null($count_clicked)) {
            throw new \InvalidArgumentException('non-nullable count_clicked cannot be null');
        }
        $this->container['count_clicked'] = $count_clicked;

        return $this;
    }

    /**
     * Gets count_unique_clicked
     *
     * @return float|null
     */
    public function getCountUniqueClicked()
    {
        return $this->container['count_unique_clicked'];
    }

    /**
     * Sets count_unique_clicked
     *
     * @param float|null $count_unique_clicked count_unique_clicked
     *
     * @return self
     */
    public function setCountUniqueClicked($count_unique_clicked)
    {
        if (is_null($count_unique_clicked)) {
            throw new \InvalidArgumentException('non-nullable count_unique_clicked cannot be null');
        }
        $this->container['count_unique_clicked'] = $count_unique_clicked;

        return $this;
    }

    /**
     * Gets count_bounce
     *
     * @return float|null
     */
    public function getCountBounce()
    {
        return $this->container['count_bounce'];
    }

    /**
     * Sets count_bounce
     *
     * @param float|null $count_bounce count_bounce
     *
     * @return self
     */
    public function setCountBounce($count_bounce)
    {
        if (is_null($count_bounce)) {
            throw new \InvalidArgumentException('non-nullable count_bounce cannot be null');
        }
        $this->container['count_bounce'] = $count_bounce;

        return $this;
    }

    /**
     * Gets count_hard_bounce
     *
     * @return float|null
     */
    public function getCountHardBounce()
    {
        return $this->container['count_hard_bounce'];
    }

    /**
     * Sets count_hard_bounce
     *
     * @param float|null $count_hard_bounce count_hard_bounce
     *
     * @return self
     */
    public function setCountHardBounce($count_hard_bounce)
    {
        if (is_null($count_hard_bounce)) {
            throw new \InvalidArgumentException('non-nullable count_hard_bounce cannot be null');
        }
        $this->container['count_hard_bounce'] = $count_hard_bounce;

        return $this;
    }

    /**
     * Gets count_soft_bounce
     *
     * @return float|null
     */
    public function getCountSoftBounce()
    {
        return $this->container['count_soft_bounce'];
    }

    /**
     * Sets count_soft_bounce
     *
     * @param float|null $count_soft_bounce count_soft_bounce
     *
     * @return self
     */
    public function setCountSoftBounce($count_soft_bounce)
    {
        if (is_null($count_soft_bounce)) {
            throw new \InvalidArgumentException('non-nullable count_soft_bounce cannot be null');
        }
        $this->container['count_soft_bounce'] = $count_soft_bounce;

        return $this;
    }

    /**
     * Gets count_rejected
     *
     * @return float|null
     */
    public function getCountRejected()
    {
        return $this->container['count_rejected'];
    }

    /**
     * Sets count_rejected
     *
     * @param float|null $count_rejected count_rejected
     *
     * @return self
     */
    public function setCountRejected($count_rejected)
    {
        if (is_null($count_rejected)) {
            throw new \InvalidArgumentException('non-nullable count_rejected cannot be null');
        }
        $this->container['count_rejected'] = $count_rejected;

        return $this;
    }

    /**
     * Gets count_spam_complaint
     *
     * @return float|null
     */
    public function getCountSpamComplaint()
    {
        return $this->container['count_spam_complaint'];
    }

    /**
     * Sets count_spam_complaint
     *
     * @param float|null $count_spam_complaint count_spam_complaint
     *
     * @return self
     */
    public function setCountSpamComplaint($count_spam_complaint)
    {
        if (is_null($count_spam_complaint)) {
            throw new \InvalidArgumentException('non-nullable count_spam_complaint cannot be null');
        }
        $this->container['count_spam_complaint'] = $count_spam_complaint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


