<?php
/**
 * GetCampaignStatsDetail200ResponseSubscribersFooBarCom
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Model;

use \ArrayAccess;
use \StejskyTom\Ecomail\ObjectSerializer;

/**
 * GetCampaignStatsDetail200ResponseSubscribersFooBarCom Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCampaignStatsDetail200ResponseSubscribersFooBarCom implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Get_campaign_stats_detail_200_response_subscribers_foo_bar_com';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'open' => 'float',
        'send' => 'float',
        'unsub' => 'float',
        'soft_bounce' => 'float',
        'click' => 'float',
        'hard_bounce' => 'float',
        'out_of_band' => 'float',
        'spam' => 'float',
        'spam_complaint' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'open' => null,
        'send' => null,
        'unsub' => null,
        'soft_bounce' => null,
        'click' => null,
        'hard_bounce' => null,
        'out_of_band' => null,
        'spam' => null,
        'spam_complaint' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'open' => false,
        'send' => false,
        'unsub' => false,
        'soft_bounce' => false,
        'click' => false,
        'hard_bounce' => false,
        'out_of_band' => false,
        'spam' => false,
        'spam_complaint' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'open' => 'open',
        'send' => 'send',
        'unsub' => 'unsub',
        'soft_bounce' => 'soft_bounce',
        'click' => 'click',
        'hard_bounce' => 'hard_bounce',
        'out_of_band' => 'out_of_band',
        'spam' => 'spam',
        'spam_complaint' => 'spam_complaint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'open' => 'setOpen',
        'send' => 'setSend',
        'unsub' => 'setUnsub',
        'soft_bounce' => 'setSoftBounce',
        'click' => 'setClick',
        'hard_bounce' => 'setHardBounce',
        'out_of_band' => 'setOutOfBand',
        'spam' => 'setSpam',
        'spam_complaint' => 'setSpamComplaint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'open' => 'getOpen',
        'send' => 'getSend',
        'unsub' => 'getUnsub',
        'soft_bounce' => 'getSoftBounce',
        'click' => 'getClick',
        'hard_bounce' => 'getHardBounce',
        'out_of_band' => 'getOutOfBand',
        'spam' => 'getSpam',
        'spam_complaint' => 'getSpamComplaint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('send', $data ?? [], null);
        $this->setIfExists('unsub', $data ?? [], null);
        $this->setIfExists('soft_bounce', $data ?? [], null);
        $this->setIfExists('click', $data ?? [], null);
        $this->setIfExists('hard_bounce', $data ?? [], null);
        $this->setIfExists('out_of_band', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('spam_complaint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets open
     *
     * @return float|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param float|null $open open
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets send
     *
     * @return float|null
     */
    public function getSend()
    {
        return $this->container['send'];
    }

    /**
     * Sets send
     *
     * @param float|null $send send
     *
     * @return self
     */
    public function setSend($send)
    {
        if (is_null($send)) {
            throw new \InvalidArgumentException('non-nullable send cannot be null');
        }
        $this->container['send'] = $send;

        return $this;
    }

    /**
     * Gets unsub
     *
     * @return float|null
     */
    public function getUnsub()
    {
        return $this->container['unsub'];
    }

    /**
     * Sets unsub
     *
     * @param float|null $unsub unsub
     *
     * @return self
     */
    public function setUnsub($unsub)
    {
        if (is_null($unsub)) {
            throw new \InvalidArgumentException('non-nullable unsub cannot be null');
        }
        $this->container['unsub'] = $unsub;

        return $this;
    }

    /**
     * Gets soft_bounce
     *
     * @return float|null
     */
    public function getSoftBounce()
    {
        return $this->container['soft_bounce'];
    }

    /**
     * Sets soft_bounce
     *
     * @param float|null $soft_bounce soft_bounce
     *
     * @return self
     */
    public function setSoftBounce($soft_bounce)
    {
        if (is_null($soft_bounce)) {
            throw new \InvalidArgumentException('non-nullable soft_bounce cannot be null');
        }
        $this->container['soft_bounce'] = $soft_bounce;

        return $this;
    }

    /**
     * Gets click
     *
     * @return float|null
     */
    public function getClick()
    {
        return $this->container['click'];
    }

    /**
     * Sets click
     *
     * @param float|null $click click
     *
     * @return self
     */
    public function setClick($click)
    {
        if (is_null($click)) {
            throw new \InvalidArgumentException('non-nullable click cannot be null');
        }
        $this->container['click'] = $click;

        return $this;
    }

    /**
     * Gets hard_bounce
     *
     * @return float|null
     */
    public function getHardBounce()
    {
        return $this->container['hard_bounce'];
    }

    /**
     * Sets hard_bounce
     *
     * @param float|null $hard_bounce hard_bounce
     *
     * @return self
     */
    public function setHardBounce($hard_bounce)
    {
        if (is_null($hard_bounce)) {
            throw new \InvalidArgumentException('non-nullable hard_bounce cannot be null');
        }
        $this->container['hard_bounce'] = $hard_bounce;

        return $this;
    }

    /**
     * Gets out_of_band
     *
     * @return float|null
     */
    public function getOutOfBand()
    {
        return $this->container['out_of_band'];
    }

    /**
     * Sets out_of_band
     *
     * @param float|null $out_of_band out_of_band
     *
     * @return self
     */
    public function setOutOfBand($out_of_band)
    {
        if (is_null($out_of_band)) {
            throw new \InvalidArgumentException('non-nullable out_of_band cannot be null');
        }
        $this->container['out_of_band'] = $out_of_band;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return float|null
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param float|null $spam spam
     *
     * @return self
     */
    public function setSpam($spam)
    {
        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets spam_complaint
     *
     * @return float|null
     */
    public function getSpamComplaint()
    {
        return $this->container['spam_complaint'];
    }

    /**
     * Sets spam_complaint
     *
     * @param float|null $spam_complaint spam_complaint
     *
     * @return self
     */
    public function setSpamComplaint($spam_complaint)
    {
        if (is_null($spam_complaint)) {
            throw new \InvalidArgumentException('non-nullable spam_complaint cannot be null');
        }
        $this->container['spam_complaint'] = $spam_complaint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


