<?php
/**
 * GetSubscriberByPhone200ResponseSubscriber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Model;

use \ArrayAccess;
use \StejskyTom\Ecomail\ObjectSerializer;

/**
 * GetSubscriberByPhone200ResponseSubscriber Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetSubscriberByPhone200ResponseSubscriber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Get_subscriber_by_phone_200_response_subscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'list_id' => 'float',
        'email' => 'string',
        'status' => 'float',
        'subscribed_at' => 'string',
        'unsubscribed_at' => 'string',
        'custom_fields' => '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberCustomFields',
        'c_fields' => 'string',
        'groups' => 'mixed',
        'source' => 'string',
        'unsub_reason' => 'mixed',
        'status_history' => '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberStatusHistoryInner[]',
        'sms_status' => 'float',
        'doi_date' => 'mixed',
        'can_change_status' => 'bool',
        'subscribed_at_utc' => 'string',
        'unsubscribed_at_utc' => 'string',
        'subscriber' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'list_id' => null,
        'email' => null,
        'status' => null,
        'subscribed_at' => null,
        'unsubscribed_at' => null,
        'custom_fields' => null,
        'c_fields' => null,
        'groups' => null,
        'source' => null,
        'unsub_reason' => null,
        'status_history' => null,
        'sms_status' => null,
        'doi_date' => null,
        'can_change_status' => null,
        'subscribed_at_utc' => null,
        'unsubscribed_at_utc' => null,
        'subscriber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'list_id' => false,
        'email' => false,
        'status' => false,
        'subscribed_at' => false,
        'unsubscribed_at' => false,
        'custom_fields' => false,
        'c_fields' => false,
        'groups' => true,
        'source' => false,
        'unsub_reason' => true,
        'status_history' => false,
        'sms_status' => false,
        'doi_date' => true,
        'can_change_status' => false,
        'subscribed_at_utc' => false,
        'unsubscribed_at_utc' => false,
        'subscriber' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'list_id' => 'list_id',
        'email' => 'email',
        'status' => 'status',
        'subscribed_at' => 'subscribed_at',
        'unsubscribed_at' => 'unsubscribed_at',
        'custom_fields' => 'custom_fields',
        'c_fields' => 'c_fields',
        'groups' => 'groups',
        'source' => 'source',
        'unsub_reason' => 'unsub_reason',
        'status_history' => 'status_history',
        'sms_status' => 'sms_status',
        'doi_date' => 'doi_date',
        'can_change_status' => 'can_change_status',
        'subscribed_at_utc' => 'subscribed_at_utc',
        'unsubscribed_at_utc' => 'unsubscribed_at_utc',
        'subscriber' => 'subscriber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'list_id' => 'setListId',
        'email' => 'setEmail',
        'status' => 'setStatus',
        'subscribed_at' => 'setSubscribedAt',
        'unsubscribed_at' => 'setUnsubscribedAt',
        'custom_fields' => 'setCustomFields',
        'c_fields' => 'setCFields',
        'groups' => 'setGroups',
        'source' => 'setSource',
        'unsub_reason' => 'setUnsubReason',
        'status_history' => 'setStatusHistory',
        'sms_status' => 'setSmsStatus',
        'doi_date' => 'setDoiDate',
        'can_change_status' => 'setCanChangeStatus',
        'subscribed_at_utc' => 'setSubscribedAtUtc',
        'unsubscribed_at_utc' => 'setUnsubscribedAtUtc',
        'subscriber' => 'setSubscriber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'list_id' => 'getListId',
        'email' => 'getEmail',
        'status' => 'getStatus',
        'subscribed_at' => 'getSubscribedAt',
        'unsubscribed_at' => 'getUnsubscribedAt',
        'custom_fields' => 'getCustomFields',
        'c_fields' => 'getCFields',
        'groups' => 'getGroups',
        'source' => 'getSource',
        'unsub_reason' => 'getUnsubReason',
        'status_history' => 'getStatusHistory',
        'sms_status' => 'getSmsStatus',
        'doi_date' => 'getDoiDate',
        'can_change_status' => 'getCanChangeStatus',
        'subscribed_at_utc' => 'getSubscribedAtUtc',
        'unsubscribed_at_utc' => 'getUnsubscribedAtUtc',
        'subscriber' => 'getSubscriber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('list_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('subscribed_at', $data ?? [], null);
        $this->setIfExists('unsubscribed_at', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('c_fields', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('unsub_reason', $data ?? [], null);
        $this->setIfExists('status_history', $data ?? [], null);
        $this->setIfExists('sms_status', $data ?? [], null);
        $this->setIfExists('doi_date', $data ?? [], null);
        $this->setIfExists('can_change_status', $data ?? [], null);
        $this->setIfExists('subscribed_at_utc', $data ?? [], null);
        $this->setIfExists('unsubscribed_at_utc', $data ?? [], null);
        $this->setIfExists('subscriber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return float|null
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param float|null $list_id list_id
     *
     * @return self
     */
    public function setListId($list_id)
    {
        if (is_null($list_id)) {
            throw new \InvalidArgumentException('non-nullable list_id cannot be null');
        }
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscribed_at
     *
     * @return string|null
     */
    public function getSubscribedAt()
    {
        return $this->container['subscribed_at'];
    }

    /**
     * Sets subscribed_at
     *
     * @param string|null $subscribed_at subscribed_at
     *
     * @return self
     */
    public function setSubscribedAt($subscribed_at)
    {
        if (is_null($subscribed_at)) {
            throw new \InvalidArgumentException('non-nullable subscribed_at cannot be null');
        }
        $this->container['subscribed_at'] = $subscribed_at;

        return $this;
    }

    /**
     * Gets unsubscribed_at
     *
     * @return string|null
     */
    public function getUnsubscribedAt()
    {
        return $this->container['unsubscribed_at'];
    }

    /**
     * Sets unsubscribed_at
     *
     * @param string|null $unsubscribed_at unsubscribed_at
     *
     * @return self
     */
    public function setUnsubscribedAt($unsubscribed_at)
    {
        if (is_null($unsubscribed_at)) {
            throw new \InvalidArgumentException('non-nullable unsubscribed_at cannot be null');
        }
        $this->container['unsubscribed_at'] = $unsubscribed_at;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberCustomFields|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberCustomFields|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets c_fields
     *
     * @return string|null
     */
    public function getCFields()
    {
        return $this->container['c_fields'];
    }

    /**
     * Sets c_fields
     *
     * @param string|null $c_fields c_fields
     *
     * @return self
     */
    public function setCFields($c_fields)
    {
        if (is_null($c_fields)) {
            throw new \InvalidArgumentException('non-nullable c_fields cannot be null');
        }
        $this->container['c_fields'] = $c_fields;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return mixed|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param mixed|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            array_push($this->openAPINullablesSetToNull, 'groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets unsub_reason
     *
     * @return mixed|null
     */
    public function getUnsubReason()
    {
        return $this->container['unsub_reason'];
    }

    /**
     * Sets unsub_reason
     *
     * @param mixed|null $unsub_reason unsub_reason
     *
     * @return self
     */
    public function setUnsubReason($unsub_reason)
    {
        if (is_null($unsub_reason)) {
            array_push($this->openAPINullablesSetToNull, 'unsub_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unsub_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unsub_reason'] = $unsub_reason;

        return $this;
    }

    /**
     * Gets status_history
     *
     * @return \StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberStatusHistoryInner[]|null
     */
    public function getStatusHistory()
    {
        return $this->container['status_history'];
    }

    /**
     * Sets status_history
     *
     * @param \StejskyTom\Ecomail\Model\GetSubscriberByPhone200ResponseSubscriberStatusHistoryInner[]|null $status_history status_history
     *
     * @return self
     */
    public function setStatusHistory($status_history)
    {
        if (is_null($status_history)) {
            throw new \InvalidArgumentException('non-nullable status_history cannot be null');
        }
        $this->container['status_history'] = $status_history;

        return $this;
    }

    /**
     * Gets sms_status
     *
     * @return float|null
     */
    public function getSmsStatus()
    {
        return $this->container['sms_status'];
    }

    /**
     * Sets sms_status
     *
     * @param float|null $sms_status sms_status
     *
     * @return self
     */
    public function setSmsStatus($sms_status)
    {
        if (is_null($sms_status)) {
            throw new \InvalidArgumentException('non-nullable sms_status cannot be null');
        }
        $this->container['sms_status'] = $sms_status;

        return $this;
    }

    /**
     * Gets doi_date
     *
     * @return mixed|null
     */
    public function getDoiDate()
    {
        return $this->container['doi_date'];
    }

    /**
     * Sets doi_date
     *
     * @param mixed|null $doi_date doi_date
     *
     * @return self
     */
    public function setDoiDate($doi_date)
    {
        if (is_null($doi_date)) {
            array_push($this->openAPINullablesSetToNull, 'doi_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doi_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['doi_date'] = $doi_date;

        return $this;
    }

    /**
     * Gets can_change_status
     *
     * @return bool|null
     */
    public function getCanChangeStatus()
    {
        return $this->container['can_change_status'];
    }

    /**
     * Sets can_change_status
     *
     * @param bool|null $can_change_status can_change_status
     *
     * @return self
     */
    public function setCanChangeStatus($can_change_status)
    {
        if (is_null($can_change_status)) {
            throw new \InvalidArgumentException('non-nullable can_change_status cannot be null');
        }
        $this->container['can_change_status'] = $can_change_status;

        return $this;
    }

    /**
     * Gets subscribed_at_utc
     *
     * @return string|null
     */
    public function getSubscribedAtUtc()
    {
        return $this->container['subscribed_at_utc'];
    }

    /**
     * Sets subscribed_at_utc
     *
     * @param string|null $subscribed_at_utc subscribed_at_utc
     *
     * @return self
     */
    public function setSubscribedAtUtc($subscribed_at_utc)
    {
        if (is_null($subscribed_at_utc)) {
            throw new \InvalidArgumentException('non-nullable subscribed_at_utc cannot be null');
        }
        $this->container['subscribed_at_utc'] = $subscribed_at_utc;

        return $this;
    }

    /**
     * Gets unsubscribed_at_utc
     *
     * @return string|null
     */
    public function getUnsubscribedAtUtc()
    {
        return $this->container['unsubscribed_at_utc'];
    }

    /**
     * Sets unsubscribed_at_utc
     *
     * @param string|null $unsubscribed_at_utc unsubscribed_at_utc
     *
     * @return self
     */
    public function setUnsubscribedAtUtc($unsubscribed_at_utc)
    {
        if (is_null($unsubscribed_at_utc)) {
            throw new \InvalidArgumentException('non-nullable unsubscribed_at_utc cannot be null');
        }
        $this->container['unsubscribed_at_utc'] = $unsubscribed_at_utc;

        return $this;
    }

    /**
     * Gets subscriber
     *
     * @return mixed|null
     */
    public function getSubscriber()
    {
        return $this->container['subscriber'];
    }

    /**
     * Sets subscriber
     *
     * @param mixed|null $subscriber subscriber
     *
     * @return self
     */
    public function setSubscriber($subscriber)
    {
        if (is_null($subscriber)) {
            array_push($this->openAPINullablesSetToNull, 'subscriber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscriber'] = $subscriber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


