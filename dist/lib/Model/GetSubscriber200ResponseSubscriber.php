<?php
/**
 * GetSubscriber200ResponseSubscriber
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Model;

use \ArrayAccess;
use \StejskyTom\Ecomail\ObjectSerializer;

/**
 * GetSubscriber200ResponseSubscriber Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetSubscriber200ResponseSubscriber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Get_subscriber_200_response_subscriber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'name' => 'string',
        'surname' => 'string',
        'email' => 'string',
        'company' => 'string',
        'street' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'gender' => 'string',
        'nameday' => 'string',
        'birthday' => 'string',
        'vokativ' => 'string',
        'vokativ_s' => 'string',
        'notes' => 'string',
        'source' => 'string',
        'tags' => 'string[]',
        'raynet_id' => 'float',
        'rating' => 'float',
        'inserted_at' => 'string',
        'bounce_soft' => 'float',
        'bounced_hard' => 'float',
        'bounce_message' => 'mixed',
        'bounce_soft_count' => 'float',
        'list_id' => 'float',
        'status' => 'float',
        'subscribed_at' => 'string',
        'unsubscribed_at' => 'mixed',
        'custom_fields' => '\StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberCustomFields',
        'groups' => '\StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberGroups',
        'sms_status' => 'float',
        'doi_date' => 'mixed',
        'can_change_status' => 'bool',
        'subscribed_at_utc' => 'string',
        'unsubscribed_at_utc' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'surname' => null,
        'email' => null,
        'company' => null,
        'street' => null,
        'city' => null,
        'zip' => null,
        'country' => null,
        'phone' => null,
        'gender' => null,
        'nameday' => null,
        'birthday' => null,
        'vokativ' => null,
        'vokativ_s' => null,
        'notes' => null,
        'source' => null,
        'tags' => null,
        'raynet_id' => null,
        'rating' => null,
        'inserted_at' => null,
        'bounce_soft' => null,
        'bounced_hard' => null,
        'bounce_message' => null,
        'bounce_soft_count' => null,
        'list_id' => null,
        'status' => null,
        'subscribed_at' => null,
        'unsubscribed_at' => null,
        'custom_fields' => null,
        'groups' => null,
        'sms_status' => null,
        'doi_date' => null,
        'can_change_status' => null,
        'subscribed_at_utc' => null,
        'unsubscribed_at_utc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'surname' => false,
        'email' => false,
        'company' => false,
        'street' => false,
        'city' => false,
        'zip' => false,
        'country' => false,
        'phone' => false,
        'gender' => false,
        'nameday' => false,
        'birthday' => false,
        'vokativ' => false,
        'vokativ_s' => false,
        'notes' => false,
        'source' => false,
        'tags' => false,
        'raynet_id' => false,
        'rating' => false,
        'inserted_at' => false,
        'bounce_soft' => false,
        'bounced_hard' => false,
        'bounce_message' => true,
        'bounce_soft_count' => false,
        'list_id' => false,
        'status' => false,
        'subscribed_at' => false,
        'unsubscribed_at' => true,
        'custom_fields' => false,
        'groups' => false,
        'sms_status' => false,
        'doi_date' => true,
        'can_change_status' => false,
        'subscribed_at_utc' => false,
        'unsubscribed_at_utc' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'surname' => 'surname',
        'email' => 'email',
        'company' => 'company',
        'street' => 'street',
        'city' => 'city',
        'zip' => 'zip',
        'country' => 'country',
        'phone' => 'phone',
        'gender' => 'gender',
        'nameday' => 'nameday',
        'birthday' => 'birthday',
        'vokativ' => 'vokativ',
        'vokativ_s' => 'vokativ_s',
        'notes' => 'notes',
        'source' => 'source',
        'tags' => 'tags',
        'raynet_id' => 'raynet_id',
        'rating' => 'rating',
        'inserted_at' => 'inserted_at',
        'bounce_soft' => 'bounce_soft',
        'bounced_hard' => 'bounced_hard',
        'bounce_message' => 'bounce_message',
        'bounce_soft_count' => 'bounce_soft_count',
        'list_id' => 'list_id',
        'status' => 'status',
        'subscribed_at' => 'subscribed_at',
        'unsubscribed_at' => 'unsubscribed_at',
        'custom_fields' => 'custom_fields',
        'groups' => 'groups',
        'sms_status' => 'sms_status',
        'doi_date' => 'doi_date',
        'can_change_status' => 'can_change_status',
        'subscribed_at_utc' => 'subscribed_at_utc',
        'unsubscribed_at_utc' => 'unsubscribed_at_utc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'surname' => 'setSurname',
        'email' => 'setEmail',
        'company' => 'setCompany',
        'street' => 'setStreet',
        'city' => 'setCity',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'gender' => 'setGender',
        'nameday' => 'setNameday',
        'birthday' => 'setBirthday',
        'vokativ' => 'setVokativ',
        'vokativ_s' => 'setVokativS',
        'notes' => 'setNotes',
        'source' => 'setSource',
        'tags' => 'setTags',
        'raynet_id' => 'setRaynetId',
        'rating' => 'setRating',
        'inserted_at' => 'setInsertedAt',
        'bounce_soft' => 'setBounceSoft',
        'bounced_hard' => 'setBouncedHard',
        'bounce_message' => 'setBounceMessage',
        'bounce_soft_count' => 'setBounceSoftCount',
        'list_id' => 'setListId',
        'status' => 'setStatus',
        'subscribed_at' => 'setSubscribedAt',
        'unsubscribed_at' => 'setUnsubscribedAt',
        'custom_fields' => 'setCustomFields',
        'groups' => 'setGroups',
        'sms_status' => 'setSmsStatus',
        'doi_date' => 'setDoiDate',
        'can_change_status' => 'setCanChangeStatus',
        'subscribed_at_utc' => 'setSubscribedAtUtc',
        'unsubscribed_at_utc' => 'setUnsubscribedAtUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'surname' => 'getSurname',
        'email' => 'getEmail',
        'company' => 'getCompany',
        'street' => 'getStreet',
        'city' => 'getCity',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'gender' => 'getGender',
        'nameday' => 'getNameday',
        'birthday' => 'getBirthday',
        'vokativ' => 'getVokativ',
        'vokativ_s' => 'getVokativS',
        'notes' => 'getNotes',
        'source' => 'getSource',
        'tags' => 'getTags',
        'raynet_id' => 'getRaynetId',
        'rating' => 'getRating',
        'inserted_at' => 'getInsertedAt',
        'bounce_soft' => 'getBounceSoft',
        'bounced_hard' => 'getBouncedHard',
        'bounce_message' => 'getBounceMessage',
        'bounce_soft_count' => 'getBounceSoftCount',
        'list_id' => 'getListId',
        'status' => 'getStatus',
        'subscribed_at' => 'getSubscribedAt',
        'unsubscribed_at' => 'getUnsubscribedAt',
        'custom_fields' => 'getCustomFields',
        'groups' => 'getGroups',
        'sms_status' => 'getSmsStatus',
        'doi_date' => 'getDoiDate',
        'can_change_status' => 'getCanChangeStatus',
        'subscribed_at_utc' => 'getSubscribedAtUtc',
        'unsubscribed_at_utc' => 'getUnsubscribedAtUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('nameday', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('vokativ', $data ?? [], null);
        $this->setIfExists('vokativ_s', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('raynet_id', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('inserted_at', $data ?? [], null);
        $this->setIfExists('bounce_soft', $data ?? [], null);
        $this->setIfExists('bounced_hard', $data ?? [], null);
        $this->setIfExists('bounce_message', $data ?? [], null);
        $this->setIfExists('bounce_soft_count', $data ?? [], null);
        $this->setIfExists('list_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('subscribed_at', $data ?? [], null);
        $this->setIfExists('unsubscribed_at', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('sms_status', $data ?? [], null);
        $this->setIfExists('doi_date', $data ?? [], null);
        $this->setIfExists('can_change_status', $data ?? [], null);
        $this->setIfExists('subscribed_at_utc', $data ?? [], null);
        $this->setIfExists('unsubscribed_at_utc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname)
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets nameday
     *
     * @return string|null
     */
    public function getNameday()
    {
        return $this->container['nameday'];
    }

    /**
     * Sets nameday
     *
     * @param string|null $nameday nameday
     *
     * @return self
     */
    public function setNameday($nameday)
    {
        if (is_null($nameday)) {
            throw new \InvalidArgumentException('non-nullable nameday cannot be null');
        }
        $this->container['nameday'] = $nameday;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets vokativ
     *
     * @return string|null
     */
    public function getVokativ()
    {
        return $this->container['vokativ'];
    }

    /**
     * Sets vokativ
     *
     * @param string|null $vokativ vokativ
     *
     * @return self
     */
    public function setVokativ($vokativ)
    {
        if (is_null($vokativ)) {
            throw new \InvalidArgumentException('non-nullable vokativ cannot be null');
        }
        $this->container['vokativ'] = $vokativ;

        return $this;
    }

    /**
     * Gets vokativ_s
     *
     * @return string|null
     */
    public function getVokativS()
    {
        return $this->container['vokativ_s'];
    }

    /**
     * Sets vokativ_s
     *
     * @param string|null $vokativ_s vokativ_s
     *
     * @return self
     */
    public function setVokativS($vokativ_s)
    {
        if (is_null($vokativ_s)) {
            throw new \InvalidArgumentException('non-nullable vokativ_s cannot be null');
        }
        $this->container['vokativ_s'] = $vokativ_s;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets raynet_id
     *
     * @return float|null
     */
    public function getRaynetId()
    {
        return $this->container['raynet_id'];
    }

    /**
     * Sets raynet_id
     *
     * @param float|null $raynet_id raynet_id
     *
     * @return self
     */
    public function setRaynetId($raynet_id)
    {
        if (is_null($raynet_id)) {
            throw new \InvalidArgumentException('non-nullable raynet_id cannot be null');
        }
        $this->container['raynet_id'] = $raynet_id;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float|null $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            throw new \InvalidArgumentException('non-nullable rating cannot be null');
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets inserted_at
     *
     * @return string|null
     */
    public function getInsertedAt()
    {
        return $this->container['inserted_at'];
    }

    /**
     * Sets inserted_at
     *
     * @param string|null $inserted_at inserted_at
     *
     * @return self
     */
    public function setInsertedAt($inserted_at)
    {
        if (is_null($inserted_at)) {
            throw new \InvalidArgumentException('non-nullable inserted_at cannot be null');
        }
        $this->container['inserted_at'] = $inserted_at;

        return $this;
    }

    /**
     * Gets bounce_soft
     *
     * @return float|null
     */
    public function getBounceSoft()
    {
        return $this->container['bounce_soft'];
    }

    /**
     * Sets bounce_soft
     *
     * @param float|null $bounce_soft bounce_soft
     *
     * @return self
     */
    public function setBounceSoft($bounce_soft)
    {
        if (is_null($bounce_soft)) {
            throw new \InvalidArgumentException('non-nullable bounce_soft cannot be null');
        }
        $this->container['bounce_soft'] = $bounce_soft;

        return $this;
    }

    /**
     * Gets bounced_hard
     *
     * @return float|null
     */
    public function getBouncedHard()
    {
        return $this->container['bounced_hard'];
    }

    /**
     * Sets bounced_hard
     *
     * @param float|null $bounced_hard bounced_hard
     *
     * @return self
     */
    public function setBouncedHard($bounced_hard)
    {
        if (is_null($bounced_hard)) {
            throw new \InvalidArgumentException('non-nullable bounced_hard cannot be null');
        }
        $this->container['bounced_hard'] = $bounced_hard;

        return $this;
    }

    /**
     * Gets bounce_message
     *
     * @return mixed|null
     */
    public function getBounceMessage()
    {
        return $this->container['bounce_message'];
    }

    /**
     * Sets bounce_message
     *
     * @param mixed|null $bounce_message bounce_message
     *
     * @return self
     */
    public function setBounceMessage($bounce_message)
    {
        if (is_null($bounce_message)) {
            array_push($this->openAPINullablesSetToNull, 'bounce_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bounce_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bounce_message'] = $bounce_message;

        return $this;
    }

    /**
     * Gets bounce_soft_count
     *
     * @return float|null
     */
    public function getBounceSoftCount()
    {
        return $this->container['bounce_soft_count'];
    }

    /**
     * Sets bounce_soft_count
     *
     * @param float|null $bounce_soft_count bounce_soft_count
     *
     * @return self
     */
    public function setBounceSoftCount($bounce_soft_count)
    {
        if (is_null($bounce_soft_count)) {
            throw new \InvalidArgumentException('non-nullable bounce_soft_count cannot be null');
        }
        $this->container['bounce_soft_count'] = $bounce_soft_count;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return float|null
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param float|null $list_id list_id
     *
     * @return self
     */
    public function setListId($list_id)
    {
        if (is_null($list_id)) {
            throw new \InvalidArgumentException('non-nullable list_id cannot be null');
        }
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return float|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param float|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscribed_at
     *
     * @return string|null
     */
    public function getSubscribedAt()
    {
        return $this->container['subscribed_at'];
    }

    /**
     * Sets subscribed_at
     *
     * @param string|null $subscribed_at subscribed_at
     *
     * @return self
     */
    public function setSubscribedAt($subscribed_at)
    {
        if (is_null($subscribed_at)) {
            throw new \InvalidArgumentException('non-nullable subscribed_at cannot be null');
        }
        $this->container['subscribed_at'] = $subscribed_at;

        return $this;
    }

    /**
     * Gets unsubscribed_at
     *
     * @return mixed|null
     */
    public function getUnsubscribedAt()
    {
        return $this->container['unsubscribed_at'];
    }

    /**
     * Sets unsubscribed_at
     *
     * @param mixed|null $unsubscribed_at unsubscribed_at
     *
     * @return self
     */
    public function setUnsubscribedAt($unsubscribed_at)
    {
        if (is_null($unsubscribed_at)) {
            array_push($this->openAPINullablesSetToNull, 'unsubscribed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unsubscribed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unsubscribed_at'] = $unsubscribed_at;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberCustomFields|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberCustomFields|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberGroups|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \StejskyTom\Ecomail\Model\GetSubscriber200ResponseSubscriberGroups|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets sms_status
     *
     * @return float|null
     */
    public function getSmsStatus()
    {
        return $this->container['sms_status'];
    }

    /**
     * Sets sms_status
     *
     * @param float|null $sms_status sms_status
     *
     * @return self
     */
    public function setSmsStatus($sms_status)
    {
        if (is_null($sms_status)) {
            throw new \InvalidArgumentException('non-nullable sms_status cannot be null');
        }
        $this->container['sms_status'] = $sms_status;

        return $this;
    }

    /**
     * Gets doi_date
     *
     * @return mixed|null
     */
    public function getDoiDate()
    {
        return $this->container['doi_date'];
    }

    /**
     * Sets doi_date
     *
     * @param mixed|null $doi_date doi_date
     *
     * @return self
     */
    public function setDoiDate($doi_date)
    {
        if (is_null($doi_date)) {
            array_push($this->openAPINullablesSetToNull, 'doi_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('doi_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['doi_date'] = $doi_date;

        return $this;
    }

    /**
     * Gets can_change_status
     *
     * @return bool|null
     */
    public function getCanChangeStatus()
    {
        return $this->container['can_change_status'];
    }

    /**
     * Sets can_change_status
     *
     * @param bool|null $can_change_status can_change_status
     *
     * @return self
     */
    public function setCanChangeStatus($can_change_status)
    {
        if (is_null($can_change_status)) {
            throw new \InvalidArgumentException('non-nullable can_change_status cannot be null');
        }
        $this->container['can_change_status'] = $can_change_status;

        return $this;
    }

    /**
     * Gets subscribed_at_utc
     *
     * @return string|null
     */
    public function getSubscribedAtUtc()
    {
        return $this->container['subscribed_at_utc'];
    }

    /**
     * Sets subscribed_at_utc
     *
     * @param string|null $subscribed_at_utc subscribed_at_utc
     *
     * @return self
     */
    public function setSubscribedAtUtc($subscribed_at_utc)
    {
        if (is_null($subscribed_at_utc)) {
            throw new \InvalidArgumentException('non-nullable subscribed_at_utc cannot be null');
        }
        $this->container['subscribed_at_utc'] = $subscribed_at_utc;

        return $this;
    }

    /**
     * Gets unsubscribed_at_utc
     *
     * @return mixed|null
     */
    public function getUnsubscribedAtUtc()
    {
        return $this->container['unsubscribed_at_utc'];
    }

    /**
     * Sets unsubscribed_at_utc
     *
     * @param mixed|null $unsubscribed_at_utc unsubscribed_at_utc
     *
     * @return self
     */
    public function setUnsubscribedAtUtc($unsubscribed_at_utc)
    {
        if (is_null($unsubscribed_at_utc)) {
            array_push($this->openAPINullablesSetToNull, 'unsubscribed_at_utc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unsubscribed_at_utc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unsubscribed_at_utc'] = $unsubscribed_at_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


