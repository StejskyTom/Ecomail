<?php
/**
 * AutomationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StejskyTom\Ecomail\ApiException;
use StejskyTom\Ecomail\Configuration;
use StejskyTom\Ecomail\HeaderSelector;
use StejskyTom\Ecomail\ObjectSerializer;

/**
 * AutomationsApi Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutomationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAutomationStats' => [
            'application/json',
        ],
        'getAutomationStatsDetail' => [
            'application/json',
        ],
        'listAllAutomations' => [
            'application/json',
        ],
        'triggerAutomation' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAutomationStats
     *
     * Get automation stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStats'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetAutomationStats200Response
     */
    public function getAutomationStats($key = null, string $contentType = self::contentTypes['getAutomationStats'][0])
    {
        list($response) = $this->getAutomationStatsWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation getAutomationStatsWithHttpInfo
     *
     * Get automation stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStats'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetAutomationStats200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutomationStatsWithHttpInfo($key = null, string $contentType = self::contentTypes['getAutomationStats'][0])
    {
        $request = $this->getAutomationStatsRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetAutomationStats200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetAutomationStats200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetAutomationStats200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetAutomationStats200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetAutomationStats200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutomationStatsAsync
     *
     * Get automation stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutomationStatsAsync($key = null, string $contentType = self::contentTypes['getAutomationStats'][0])
    {
        return $this->getAutomationStatsAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutomationStatsAsyncWithHttpInfo
     *
     * Get automation stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutomationStatsAsyncWithHttpInfo($key = null, string $contentType = self::contentTypes['getAutomationStats'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetAutomationStats200Response';
        $request = $this->getAutomationStatsRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutomationStats'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAutomationStatsRequest($key = null, string $contentType = self::contentTypes['getAutomationStats'][0])
    {



        $resourcePath = '/pipelines/{pipeline_id}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAutomationStatsDetail
     *
     * Get automation stats-detail
     *
     * @param  int $pipeline_id required, id of the automation (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStatsDetail'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response
     */
    public function getAutomationStatsDetail($pipeline_id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getAutomationStatsDetail'][0])
    {
        list($response) = $this->getAutomationStatsDetailWithHttpInfo($pipeline_id, $event, $email, $from_date, $per_page, $page, $key, $contentType);
        return $response;
    }

    /**
     * Operation getAutomationStatsDetailWithHttpInfo
     *
     * Get automation stats-detail
     *
     * @param  int $pipeline_id required, id of the automation (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStatsDetail'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAutomationStatsDetailWithHttpInfo($pipeline_id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getAutomationStatsDetail'][0])
    {
        $request = $this->getAutomationStatsDetailRequest($pipeline_id, $event, $email, $from_date, $per_page, $page, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAutomationStatsDetailAsync
     *
     * Get automation stats-detail
     *
     * @param  int $pipeline_id required, id of the automation (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutomationStatsDetailAsync($pipeline_id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getAutomationStatsDetail'][0])
    {
        return $this->getAutomationStatsDetailAsyncWithHttpInfo($pipeline_id, $event, $email, $from_date, $per_page, $page, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAutomationStatsDetailAsyncWithHttpInfo
     *
     * Get automation stats-detail
     *
     * @param  int $pipeline_id required, id of the automation (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAutomationStatsDetailAsyncWithHttpInfo($pipeline_id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getAutomationStatsDetail'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetAutomationStatsDetail200Response';
        $request = $this->getAutomationStatsDetailRequest($pipeline_id, $event, $email, $from_date, $per_page, $page, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAutomationStatsDetail'
     *
     * @param  int $pipeline_id required, id of the automation (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAutomationStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAutomationStatsDetailRequest($pipeline_id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getAutomationStatsDetail'][0])
    {

        // verify the required parameter 'pipeline_id' is set
        if ($pipeline_id === null || (is_array($pipeline_id) && count($pipeline_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pipeline_id when calling getAutomationStatsDetail'
            );
        }








        $resourcePath = '/pipelines/{pipeline_id}/stats-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event,
            'event', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($pipeline_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pipeline_id' . '}',
                ObjectSerializer::toPathValue($pipeline_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllAutomations
     *
     * List All Automations
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllAutomations'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]
     */
    public function listAllAutomations($key = null, string $contentType = self::contentTypes['listAllAutomations'][0])
    {
        list($response) = $this->listAllAutomationsWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation listAllAutomationsWithHttpInfo
     *
     * List All Automations
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllAutomations'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllAutomationsWithHttpInfo($key = null, string $contentType = self::contentTypes['listAllAutomations'][0])
    {
        $request = $this->listAllAutomationsRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllAutomationsAsync
     *
     * List All Automations
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllAutomations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllAutomationsAsync($key = null, string $contentType = self::contentTypes['listAllAutomations'][0])
    {
        return $this->listAllAutomationsAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllAutomationsAsyncWithHttpInfo
     *
     * List All Automations
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllAutomations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllAutomationsAsyncWithHttpInfo($key = null, string $contentType = self::contentTypes['listAllAutomations'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\ListAllAutomations200ResponseInner[]';
        $request = $this->listAllAutomationsRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllAutomations'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllAutomations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllAutomationsRequest($key = null, string $contentType = self::contentTypes['listAllAutomations'][0])
    {



        $resourcePath = '/pipelines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation triggerAutomation
     *
     * Trigger automation
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerAutomation'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest
     */
    public function triggerAutomation($key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['triggerAutomation'][0])
    {
        list($response) = $this->triggerAutomationWithHttpInfo($key, $remove_subscriber_from_list_request, $contentType);
        return $response;
    }

    /**
     * Operation triggerAutomationWithHttpInfo
     *
     * Trigger automation
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerAutomation'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function triggerAutomationWithHttpInfo($key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['triggerAutomation'][0])
    {
        $request = $this->triggerAutomationRequest($key, $remove_subscriber_from_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation triggerAutomationAsync
     *
     * Trigger automation
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerAutomation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerAutomationAsync($key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['triggerAutomation'][0])
    {
        return $this->triggerAutomationAsyncWithHttpInfo($key, $remove_subscriber_from_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation triggerAutomationAsyncWithHttpInfo
     *
     * Trigger automation
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerAutomation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerAutomationAsyncWithHttpInfo($key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['triggerAutomation'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest';
        $request = $this->triggerAutomationRequest($key, $remove_subscriber_from_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'triggerAutomation'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['triggerAutomation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function triggerAutomationRequest($key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['triggerAutomation'][0])
    {




        $resourcePath = '/pipelines/{pipeline_id}/trigger/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_subscriber_from_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_subscriber_from_list_request));
            } else {
                $httpBody = $remove_subscriber_from_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
