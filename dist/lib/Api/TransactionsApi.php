<?php
/**
 * TransactionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StejskyTom\Ecomail\ApiException;
use StejskyTom\Ecomail\Configuration;
use StejskyTom\Ecomail\HeaderSelector;
use StejskyTom\Ecomail\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createANewTransaction' => [
            'application/json',
        ],
        'createBulkTransactions' => [
            'application/json',
        ],
        'removeTransactionFromDb' => [
            'application/json',
        ],
        'updateTransaction' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createANewTransaction
     *
     * Create a new transaction
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateANewTransactionRequest $create_a_new_transaction_request create_a_new_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createANewTransaction'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\CreateANewTransaction200Response|\StejskyTom\Ecomail\Model\CreateANewTransaction422Response
     */
    public function createANewTransaction($key = null, $create_a_new_transaction_request = null, string $contentType = self::contentTypes['createANewTransaction'][0])
    {
        list($response) = $this->createANewTransactionWithHttpInfo($key, $create_a_new_transaction_request, $contentType);
        return $response;
    }

    /**
     * Operation createANewTransactionWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateANewTransactionRequest $create_a_new_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createANewTransaction'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\CreateANewTransaction200Response|\StejskyTom\Ecomail\Model\CreateANewTransaction422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createANewTransactionWithHttpInfo($key = null, $create_a_new_transaction_request = null, string $contentType = self::contentTypes['createANewTransaction'][0])
    {
        $request = $this->createANewTransactionRequest($key, $create_a_new_transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\CreateANewTransaction200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\CreateANewTransaction200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\CreateANewTransaction200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\StejskyTom\Ecomail\Model\CreateANewTransaction422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\CreateANewTransaction422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\CreateANewTransaction422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\CreateANewTransaction200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\CreateANewTransaction200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\CreateANewTransaction422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createANewTransactionAsync
     *
     * Create a new transaction
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateANewTransactionRequest $create_a_new_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createANewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewTransactionAsync($key = null, $create_a_new_transaction_request = null, string $contentType = self::contentTypes['createANewTransaction'][0])
    {
        return $this->createANewTransactionAsyncWithHttpInfo($key, $create_a_new_transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createANewTransactionAsyncWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateANewTransactionRequest $create_a_new_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createANewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewTransactionAsyncWithHttpInfo($key = null, $create_a_new_transaction_request = null, string $contentType = self::contentTypes['createANewTransaction'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\CreateANewTransaction200Response';
        $request = $this->createANewTransactionRequest($key, $create_a_new_transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createANewTransaction'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateANewTransactionRequest $create_a_new_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createANewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createANewTransactionRequest($key = null, $create_a_new_transaction_request = null, string $contentType = self::contentTypes['createANewTransaction'][0])
    {




        $resourcePath = '/tracker/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_a_new_transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_a_new_transaction_request));
            } else {
                $httpBody = $create_a_new_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBulkTransactions
     *
     * Create bulk transactions
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateBulkTransactionsRequest $create_bulk_transactions_request create_bulk_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkTransactions'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response
     */
    public function createBulkTransactions($key = null, $create_bulk_transactions_request = null, string $contentType = self::contentTypes['createBulkTransactions'][0])
    {
        list($response) = $this->createBulkTransactionsWithHttpInfo($key, $create_bulk_transactions_request, $contentType);
        return $response;
    }

    /**
     * Operation createBulkTransactionsWithHttpInfo
     *
     * Create bulk transactions
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateBulkTransactionsRequest $create_bulk_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkTransactions'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkTransactionsWithHttpInfo($key = null, $create_bulk_transactions_request = null, string $contentType = self::contentTypes['createBulkTransactions'][0])
    {
        $request = $this->createBulkTransactionsRequest($key, $create_bulk_transactions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBulkTransactionsAsync
     *
     * Create bulk transactions
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateBulkTransactionsRequest $create_bulk_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBulkTransactionsAsync($key = null, $create_bulk_transactions_request = null, string $contentType = self::contentTypes['createBulkTransactions'][0])
    {
        return $this->createBulkTransactionsAsyncWithHttpInfo($key, $create_bulk_transactions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBulkTransactionsAsyncWithHttpInfo
     *
     * Create bulk transactions
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateBulkTransactionsRequest $create_bulk_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBulkTransactionsAsyncWithHttpInfo($key = null, $create_bulk_transactions_request = null, string $contentType = self::contentTypes['createBulkTransactions'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response';
        $request = $this->createBulkTransactionsRequest($key, $create_bulk_transactions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBulkTransactions'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\CreateBulkTransactionsRequest $create_bulk_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBulkTransactionsRequest($key = null, $create_bulk_transactions_request = null, string $contentType = self::contentTypes['createBulkTransactions'][0])
    {




        $resourcePath = '/tracker/transaction-bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_bulk_transactions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_bulk_transactions_request));
            } else {
                $httpBody = $create_bulk_transactions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTransactionFromDb
     *
     * Remove transaction from db
     *
     * @param  int $order_id order id from your shop (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTransactionFromDb'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response
     */
    public function removeTransactionFromDb($order_id, $key = null, string $contentType = self::contentTypes['removeTransactionFromDb'][0])
    {
        list($response) = $this->removeTransactionFromDbWithHttpInfo($order_id, $key, $contentType);
        return $response;
    }

    /**
     * Operation removeTransactionFromDbWithHttpInfo
     *
     * Remove transaction from db
     *
     * @param  int $order_id order id from your shop (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTransactionFromDb'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTransactionFromDbWithHttpInfo($order_id, $key = null, string $contentType = self::contentTypes['removeTransactionFromDb'][0])
    {
        $request = $this->removeTransactionFromDbRequest($order_id, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeTransactionFromDbAsync
     *
     * Remove transaction from db
     *
     * @param  int $order_id order id from your shop (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTransactionFromDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTransactionFromDbAsync($order_id, $key = null, string $contentType = self::contentTypes['removeTransactionFromDb'][0])
    {
        return $this->removeTransactionFromDbAsyncWithHttpInfo($order_id, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeTransactionFromDbAsyncWithHttpInfo
     *
     * Remove transaction from db
     *
     * @param  int $order_id order id from your shop (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTransactionFromDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTransactionFromDbAsyncWithHttpInfo($order_id, $key = null, string $contentType = self::contentTypes['removeTransactionFromDb'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromDb200Response';
        $request = $this->removeTransactionFromDbRequest($order_id, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeTransactionFromDb'
     *
     * @param  int $order_id order id from your shop (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTransactionFromDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeTransactionFromDbRequest($order_id, $key = null, string $contentType = self::contentTypes['removeTransactionFromDb'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling removeTransactionFromDb'
            );
        }



        $resourcePath = '/tracker/transaction/{order_id}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'order_id' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransaction
     *
     * Update transaction
     *
     * @param  int $id id of order (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateTransactionRequest $update_transaction_request update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTransaction($id, $key = null, $update_transaction_request = null, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $this->updateTransactionWithHttpInfo($id, $key, $update_transaction_request, $contentType);
    }

    /**
     * Operation updateTransactionWithHttpInfo
     *
     * Update transaction
     *
     * @param  int $id id of order (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateTransactionRequest $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionWithHttpInfo($id, $key = null, $update_transaction_request = null, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $request = $this->updateTransactionRequest($id, $key, $update_transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateTransactionAsync
     *
     * Update transaction
     *
     * @param  int $id id of order (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateTransactionRequest $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsync($id, $key = null, $update_transaction_request = null, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        return $this->updateTransactionAsyncWithHttpInfo($id, $key, $update_transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionAsyncWithHttpInfo
     *
     * Update transaction
     *
     * @param  int $id id of order (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateTransactionRequest $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionAsyncWithHttpInfo($id, $key = null, $update_transaction_request = null, string $contentType = self::contentTypes['updateTransaction'][0])
    {
        $returnType = '';
        $request = $this->updateTransactionRequest($id, $key, $update_transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransaction'
     *
     * @param  int $id id of order (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateTransactionRequest $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransactionRequest($id, $key = null, $update_transaction_request = null, string $contentType = self::contentTypes['updateTransaction'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTransaction'
            );
        }




        $resourcePath = '/tracker/transaction/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_transaction_request));
            } else {
                $httpBody = $update_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
