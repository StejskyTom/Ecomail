<?php
/**
 * CampaignsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StejskyTom\Ecomail\ApiException;
use StejskyTom\Ecomail\Configuration;
use StejskyTom\Ecomail\HeaderSelector;
use StejskyTom\Ecomail\ObjectSerializer;

/**
 * CampaignsApi Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addNewCampaign' => [
            'application/json',
        ],
        'getCampaignStats' => [
            'application/json',
        ],
        'getCampaignStatsDetail' => [
            'application/json',
        ],
        'listAllCampaigns' => [
            'application/json',
        ],
        'sendCampaign' => [
            'application/json',
        ],
        'updateCampaign' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNewCampaign
     *
     * Add new campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewCampaignRequest $add_new_campaign_request add_new_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\AddNewCampaign200Response
     */
    public function addNewCampaign($key = null, $add_new_campaign_request = null, string $contentType = self::contentTypes['addNewCampaign'][0])
    {
        list($response) = $this->addNewCampaignWithHttpInfo($key, $add_new_campaign_request, $contentType);
        return $response;
    }

    /**
     * Operation addNewCampaignWithHttpInfo
     *
     * Add new campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewCampaignRequest $add_new_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\AddNewCampaign200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCampaignWithHttpInfo($key = null, $add_new_campaign_request = null, string $contentType = self::contentTypes['addNewCampaign'][0])
    {
        $request = $this->addNewCampaignRequest($key, $add_new_campaign_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\AddNewCampaign200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddNewCampaign200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddNewCampaign200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\AddNewCampaign200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddNewCampaign200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNewCampaignAsync
     *
     * Add new campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewCampaignRequest $add_new_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCampaignAsync($key = null, $add_new_campaign_request = null, string $contentType = self::contentTypes['addNewCampaign'][0])
    {
        return $this->addNewCampaignAsyncWithHttpInfo($key, $add_new_campaign_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCampaignAsyncWithHttpInfo
     *
     * Add new campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewCampaignRequest $add_new_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCampaignAsyncWithHttpInfo($key = null, $add_new_campaign_request = null, string $contentType = self::contentTypes['addNewCampaign'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\AddNewCampaign200Response';
        $request = $this->addNewCampaignRequest($key, $add_new_campaign_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewCampaign'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewCampaignRequest $add_new_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCampaignRequest($key = null, $add_new_campaign_request = null, string $contentType = self::contentTypes['addNewCampaign'][0])
    {




        $resourcePath = '/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_new_campaign_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_new_campaign_request));
            } else {
                $httpBody = $add_new_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignStats
     *
     * Get campaign stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStats'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetCampaignStats200Response
     */
    public function getCampaignStats($key = null, string $contentType = self::contentTypes['getCampaignStats'][0])
    {
        list($response) = $this->getCampaignStatsWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignStatsWithHttpInfo
     *
     * Get campaign stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStats'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetCampaignStats200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignStatsWithHttpInfo($key = null, string $contentType = self::contentTypes['getCampaignStats'][0])
    {
        $request = $this->getCampaignStatsRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetCampaignStats200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetCampaignStats200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetCampaignStats200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetCampaignStats200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetCampaignStats200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignStatsAsync
     *
     * Get campaign stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignStatsAsync($key = null, string $contentType = self::contentTypes['getCampaignStats'][0])
    {
        return $this->getCampaignStatsAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignStatsAsyncWithHttpInfo
     *
     * Get campaign stats
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignStatsAsyncWithHttpInfo($key = null, string $contentType = self::contentTypes['getCampaignStats'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetCampaignStats200Response';
        $request = $this->getCampaignStatsRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignStats'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignStatsRequest($key = null, string $contentType = self::contentTypes['getCampaignStats'][0])
    {



        $resourcePath = '/campaigns/{campaign_id}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignStatsDetail
     *
     * Get campaign stats-detail
     *
     * @param  int $id required, id of the campaign (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStatsDetail'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response
     */
    public function getCampaignStatsDetail($id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getCampaignStatsDetail'][0])
    {
        list($response) = $this->getCampaignStatsDetailWithHttpInfo($id, $event, $email, $from_date, $per_page, $page, $key, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignStatsDetailWithHttpInfo
     *
     * Get campaign stats-detail
     *
     * @param  int $id required, id of the campaign (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStatsDetail'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignStatsDetailWithHttpInfo($id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getCampaignStatsDetail'][0])
    {
        $request = $this->getCampaignStatsDetailRequest($id, $event, $email, $from_date, $per_page, $page, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignStatsDetailAsync
     *
     * Get campaign stats-detail
     *
     * @param  int $id required, id of the campaign (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignStatsDetailAsync($id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getCampaignStatsDetail'][0])
    {
        return $this->getCampaignStatsDetailAsyncWithHttpInfo($id, $event, $email, $from_date, $per_page, $page, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignStatsDetailAsyncWithHttpInfo
     *
     * Get campaign stats-detail
     *
     * @param  int $id required, id of the campaign (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignStatsDetailAsyncWithHttpInfo($id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getCampaignStatsDetail'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetCampaignStatsDetail200Response';
        $request = $this->getCampaignStatsDetailRequest($id, $event, $email, $from_date, $per_page, $page, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignStatsDetail'
     *
     * @param  int $id required, id of the campaign (required)
     * @param  string $event optional, filter by: open, send, unsub, soft_bounce, click, hard_bounce, out_of_band, spam (optional)
     * @param  string $email optional, filter by email (optional)
     * @param  string $from_date optional, filter by contacts with events from set date onwards (YYYY-MM-DD format) (optional)
     * @param  int $per_page optional, returns x number of results per response instead of default 100, a limit of 5000 per page (optional)
     * @param  int $page optional, returns results from page x (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignStatsDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignStatsDetailRequest($id, $event = null, $email = null, $from_date = null, $per_page = null, $page = null, $key = null, string $contentType = self::contentTypes['getCampaignStatsDetail'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCampaignStatsDetail'
            );
        }








        $resourcePath = '/campaigns/{id}/stats-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event,
            'event', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_date,
            'from_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllCampaigns
     *
     * List All Campaigns
     *
     * @param  string $page Page number, results are paginated by 50 records (optional)
     * @param  mixed[] $filters Filters to filter results.  valid filters: status     Example: &#x60;/campaigns?filters[status]&#x3D;1&#x60; (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllCampaigns'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listAllCampaigns($page = null, $filters = null, $key = null, string $contentType = self::contentTypes['listAllCampaigns'][0])
    {
        $this->listAllCampaignsWithHttpInfo($page, $filters, $key, $contentType);
    }

    /**
     * Operation listAllCampaignsWithHttpInfo
     *
     * List All Campaigns
     *
     * @param  string $page Page number, results are paginated by 50 records (optional)
     * @param  mixed[] $filters Filters to filter results.  valid filters: status     Example: &#x60;/campaigns?filters[status]&#x3D;1&#x60; (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllCampaigns'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllCampaignsWithHttpInfo($page = null, $filters = null, $key = null, string $contentType = self::contentTypes['listAllCampaigns'][0])
    {
        $request = $this->listAllCampaignsRequest($page, $filters, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listAllCampaignsAsync
     *
     * List All Campaigns
     *
     * @param  string $page Page number, results are paginated by 50 records (optional)
     * @param  mixed[] $filters Filters to filter results.  valid filters: status     Example: &#x60;/campaigns?filters[status]&#x3D;1&#x60; (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllCampaignsAsync($page = null, $filters = null, $key = null, string $contentType = self::contentTypes['listAllCampaigns'][0])
    {
        return $this->listAllCampaignsAsyncWithHttpInfo($page, $filters, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllCampaignsAsyncWithHttpInfo
     *
     * List All Campaigns
     *
     * @param  string $page Page number, results are paginated by 50 records (optional)
     * @param  mixed[] $filters Filters to filter results.  valid filters: status     Example: &#x60;/campaigns?filters[status]&#x3D;1&#x60; (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllCampaignsAsyncWithHttpInfo($page = null, $filters = null, $key = null, string $contentType = self::contentTypes['listAllCampaigns'][0])
    {
        $returnType = '';
        $request = $this->listAllCampaignsRequest($page, $filters, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllCampaigns'
     *
     * @param  string $page Page number, results are paginated by 50 records (optional)
     * @param  mixed[] $filters Filters to filter results.  valid filters: status     Example: &#x60;/campaigns?filters[status]&#x3D;1&#x60; (optional)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllCampaignsRequest($page = null, $filters = null, $key = null, string $contentType = self::contentTypes['listAllCampaigns'][0])
    {





        $resourcePath = '/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendCampaign
     *
     * Send campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]
     */
    public function sendCampaign($key = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        list($response) = $this->sendCampaignWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation sendCampaignWithHttpInfo
     *
     * Send campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sendCampaignWithHttpInfo($key = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        $request = $this->sendCampaignRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendCampaignAsync
     *
     * Send campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCampaignAsync($key = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        return $this->sendCampaignAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendCampaignAsyncWithHttpInfo
     *
     * Send campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCampaignAsyncWithHttpInfo($key = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\SendCampaign200ResponseInner[]';
        $request = $this->sendCampaignRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendCampaign'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendCampaignRequest($key = null, string $contentType = self::contentTypes['sendCampaign'][0])
    {



        $resourcePath = '/campaign/{campaign_id}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCampaign
     *
     * Update campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateCampaignRequest $update_campaign_request update_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\UpdateCampaign200Response
     */
    public function updateCampaign($key = null, $update_campaign_request = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        list($response) = $this->updateCampaignWithHttpInfo($key, $update_campaign_request, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignWithHttpInfo
     *
     * Update campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateCampaignRequest $update_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\UpdateCampaign200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignWithHttpInfo($key = null, $update_campaign_request = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        $request = $this->updateCampaignRequest($key, $update_campaign_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\UpdateCampaign200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\UpdateCampaign200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\UpdateCampaign200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\UpdateCampaign200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\UpdateCampaign200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCampaignAsync
     *
     * Update campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateCampaignRequest $update_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsync($key = null, $update_campaign_request = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        return $this->updateCampaignAsyncWithHttpInfo($key, $update_campaign_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignAsyncWithHttpInfo
     *
     * Update campaign
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateCampaignRequest $update_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignAsyncWithHttpInfo($key = null, $update_campaign_request = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\UpdateCampaign200Response';
        $request = $this->updateCampaignRequest($key, $update_campaign_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCampaign'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateCampaignRequest $update_campaign_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignRequest($key = null, $update_campaign_request = null, string $contentType = self::contentTypes['updateCampaign'][0])
    {




        $resourcePath = '/campaigns/{campaign_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_campaign_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_campaign_request));
            } else {
                $httpBody = $update_campaign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
