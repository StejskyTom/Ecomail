<?php
/**
 * ListsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ecomail.cz v2.0 API
 *
 * Welcome to the **Ecomail.cz v2.0 API**! Our API provides a powerful and flexible way to integrate your applications with our email marketing and automation platform. This API allows you to manage email campaigns, subscribers, lists, and much more, through our RESTful endpoints.  ## Key Features  + **Subscriber Management**: Create, update, and manage subscribers.  + **List Management**: Organize contacts into lists for targeted campaigns.  + **Campaign Management**: Automate and send campaigns.  + **Transactional Emails**: Send and track transactional emails.  + **Analytics and Reporting**: Access insights into campaign performance.  + **Automation and Workflow**: Establish automated email sequences.  ## Getting Started  All endpoints use base url `https://api2.ecomailapp.cz/`  Before using the API, an **API key is required for authentication**. Obtain your API key from your Ecomail account settings _(Manage your account → Integrations → For developers → Copy API Key)_: ![How to find API Key](https://i.imgur.com/ZAJoFcN.png) ![How to find API Key](https://i.imgur.com/36U4Ted.png) ![How to find API Key](https://i.imgur.com/5JRbJrJ.png) ![How to find API Key](https://i.imgur.com/WHCWLMe.png)  **All API calls to the Ecomail.cz v2.0 API require authorization**. To authenticate requests, use a header with your API key.  ### Authentication Header  Every request must include a header named `key` that contains your API key.  `key: API_KEY`  ### Rate Limiting  The API allows up to **1000 calls per minute** per API key. Exceeding this limit will throttle the requests, returning a **429 status code** with a `Retry-After` header.
 *
 * The version of the OpenAPI document: 
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StejskyTom\Ecomail\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StejskyTom\Ecomail\ApiException;
use StejskyTom\Ecomail\Configuration;
use StejskyTom\Ecomail\HeaderSelector;
use StejskyTom\Ecomail\ObjectSerializer;

/**
 * ListsApi Class Doc Comment
 *
 * @category Class
 * @package  StejskyTom\Ecomail
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addBulkSubscribersToList' => [
            'application/json',
        ],
        'addNewList' => [
            'application/json',
        ],
        'addNewSubscriberToList' => [
            'application/json',
        ],
        'getSubscriber' => [
            'application/json',
        ],
        'getSubscriberByPhone' => [
            'application/json',
        ],
        'getSubscribers' => [
            'application/json',
        ],
        'removeSubscriberFromList' => [
            'application/json',
        ],
        'showList' => [
            'application/json',
        ],
        'updateList' => [
            'application/json',
        ],
        'updateSubscriber' => [
            'application/json',
        ],
        'viewAllLists' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addBulkSubscribersToList
     *
     * Add bulk subscribers to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddBulkSubscribersToListRequest $add_bulk_subscribers_to_list_request add_bulk_subscribers_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBulkSubscribersToList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response|\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response
     */
    public function addBulkSubscribersToList($list_id, $key = null, $add_bulk_subscribers_to_list_request = null, string $contentType = self::contentTypes['addBulkSubscribersToList'][0])
    {
        list($response) = $this->addBulkSubscribersToListWithHttpInfo($list_id, $key, $add_bulk_subscribers_to_list_request, $contentType);
        return $response;
    }

    /**
     * Operation addBulkSubscribersToListWithHttpInfo
     *
     * Add bulk subscribers to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddBulkSubscribersToListRequest $add_bulk_subscribers_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBulkSubscribersToList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response|\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBulkSubscribersToListWithHttpInfo($list_id, $key = null, $add_bulk_subscribers_to_list_request = null, string $contentType = self::contentTypes['addBulkSubscribersToList'][0])
    {
        $request = $this->addBulkSubscribersToListRequest($list_id, $key, $add_bulk_subscribers_to_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addBulkSubscribersToListAsync
     *
     * Add bulk subscribers to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddBulkSubscribersToListRequest $add_bulk_subscribers_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBulkSubscribersToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBulkSubscribersToListAsync($list_id, $key = null, $add_bulk_subscribers_to_list_request = null, string $contentType = self::contentTypes['addBulkSubscribersToList'][0])
    {
        return $this->addBulkSubscribersToListAsyncWithHttpInfo($list_id, $key, $add_bulk_subscribers_to_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBulkSubscribersToListAsyncWithHttpInfo
     *
     * Add bulk subscribers to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddBulkSubscribersToListRequest $add_bulk_subscribers_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBulkSubscribersToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBulkSubscribersToListAsyncWithHttpInfo($list_id, $key = null, $add_bulk_subscribers_to_list_request = null, string $contentType = self::contentTypes['addBulkSubscribersToList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\AddBulkSubscribersToList200Response';
        $request = $this->addBulkSubscribersToListRequest($list_id, $key, $add_bulk_subscribers_to_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addBulkSubscribersToList'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddBulkSubscribersToListRequest $add_bulk_subscribers_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBulkSubscribersToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBulkSubscribersToListRequest($list_id, $key = null, $add_bulk_subscribers_to_list_request = null, string $contentType = self::contentTypes['addBulkSubscribersToList'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling addBulkSubscribersToList'
            );
        }




        $resourcePath = '/lists/{list_id}/subscribe-bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_bulk_subscribers_to_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_bulk_subscribers_to_list_request));
            } else {
                $httpBody = $add_bulk_subscribers_to_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewList
     *
     * Add new list
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewListRequest $add_new_list_request add_new_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\AddNewList200Response
     */
    public function addNewList($key = null, $add_new_list_request = null, string $contentType = self::contentTypes['addNewList'][0])
    {
        list($response) = $this->addNewListWithHttpInfo($key, $add_new_list_request, $contentType);
        return $response;
    }

    /**
     * Operation addNewListWithHttpInfo
     *
     * Add new list
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewListRequest $add_new_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\AddNewList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewListWithHttpInfo($key = null, $add_new_list_request = null, string $contentType = self::contentTypes['addNewList'][0])
    {
        $request = $this->addNewListRequest($key, $add_new_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\AddNewList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddNewList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddNewList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\AddNewList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddNewList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNewListAsync
     *
     * Add new list
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewListRequest $add_new_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewListAsync($key = null, $add_new_list_request = null, string $contentType = self::contentTypes['addNewList'][0])
    {
        return $this->addNewListAsyncWithHttpInfo($key, $add_new_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewListAsyncWithHttpInfo
     *
     * Add new list
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewListRequest $add_new_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewListAsyncWithHttpInfo($key = null, $add_new_list_request = null, string $contentType = self::contentTypes['addNewList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\AddNewList200Response';
        $request = $this->addNewListRequest($key, $add_new_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewList'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewListRequest $add_new_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewListRequest($key = null, $add_new_list_request = null, string $contentType = self::contentTypes['addNewList'][0])
    {




        $resourcePath = '/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_new_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_new_list_request));
            } else {
                $httpBody = $add_new_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewSubscriberToList
     *
     * Add new subscriber to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewSubscriberToListRequest $add_new_subscriber_to_list_request add_new_subscriber_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewSubscriberToList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response
     */
    public function addNewSubscriberToList($list_id, $key = null, $add_new_subscriber_to_list_request = null, string $contentType = self::contentTypes['addNewSubscriberToList'][0])
    {
        list($response) = $this->addNewSubscriberToListWithHttpInfo($list_id, $key, $add_new_subscriber_to_list_request, $contentType);
        return $response;
    }

    /**
     * Operation addNewSubscriberToListWithHttpInfo
     *
     * Add new subscriber to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewSubscriberToListRequest $add_new_subscriber_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewSubscriberToList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewSubscriberToListWithHttpInfo($list_id, $key = null, $add_new_subscriber_to_list_request = null, string $contentType = self::contentTypes['addNewSubscriberToList'][0])
    {
        $request = $this->addNewSubscriberToListRequest($list_id, $key, $add_new_subscriber_to_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNewSubscriberToListAsync
     *
     * Add new subscriber to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewSubscriberToListRequest $add_new_subscriber_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewSubscriberToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewSubscriberToListAsync($list_id, $key = null, $add_new_subscriber_to_list_request = null, string $contentType = self::contentTypes['addNewSubscriberToList'][0])
    {
        return $this->addNewSubscriberToListAsyncWithHttpInfo($list_id, $key, $add_new_subscriber_to_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewSubscriberToListAsyncWithHttpInfo
     *
     * Add new subscriber to list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewSubscriberToListRequest $add_new_subscriber_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewSubscriberToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewSubscriberToListAsyncWithHttpInfo($list_id, $key = null, $add_new_subscriber_to_list_request = null, string $contentType = self::contentTypes['addNewSubscriberToList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\AddNewSubscriberToList200Response';
        $request = $this->addNewSubscriberToListRequest($list_id, $key, $add_new_subscriber_to_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewSubscriberToList'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\AddNewSubscriberToListRequest $add_new_subscriber_to_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewSubscriberToList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewSubscriberToListRequest($list_id, $key = null, $add_new_subscriber_to_list_request = null, string $contentType = self::contentTypes['addNewSubscriberToList'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling addNewSubscriberToList'
            );
        }




        $resourcePath = '/lists/{list_id}/subscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_new_subscriber_to_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_new_subscriber_to_list_request));
            } else {
                $httpBody = $add_new_subscriber_to_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriber
     *
     * Get subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $email Email of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriber'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetSubscriber200Response|\StejskyTom\Ecomail\Model\GetSubscriber404Response
     */
    public function getSubscriber($list_id, $email, $key = null, string $contentType = self::contentTypes['getSubscriber'][0])
    {
        list($response) = $this->getSubscriberWithHttpInfo($list_id, $email, $key, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriberWithHttpInfo
     *
     * Get subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $email Email of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriber'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetSubscriber200Response|\StejskyTom\Ecomail\Model\GetSubscriber404Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriberWithHttpInfo($list_id, $email, $key = null, string $contentType = self::contentTypes['getSubscriber'][0])
    {
        $request = $this->getSubscriberRequest($list_id, $email, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetSubscriber200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetSubscriber200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetSubscriber200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\StejskyTom\Ecomail\Model\GetSubscriber404Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetSubscriber404Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetSubscriber404Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetSubscriber200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetSubscriber200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetSubscriber404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriberAsync
     *
     * Get subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $email Email of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberAsync($list_id, $email, $key = null, string $contentType = self::contentTypes['getSubscriber'][0])
    {
        return $this->getSubscriberAsyncWithHttpInfo($list_id, $email, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriberAsyncWithHttpInfo
     *
     * Get subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $email Email of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberAsyncWithHttpInfo($list_id, $email, $key = null, string $contentType = self::contentTypes['getSubscriber'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetSubscriber200Response';
        $request = $this->getSubscriberRequest($list_id, $email, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriber'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $email Email of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriberRequest($list_id, $email, $key = null, string $contentType = self::contentTypes['getSubscriber'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getSubscriber'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling getSubscriber'
            );
        }



        $resourcePath = '/lists/{list_id}/subscriber/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriberByPhone
     *
     * Get subscriber by phone
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $phone Phone of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriberByPhone'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response
     */
    public function getSubscriberByPhone($list_id, $phone, $key = null, string $contentType = self::contentTypes['getSubscriberByPhone'][0])
    {
        list($response) = $this->getSubscriberByPhoneWithHttpInfo($list_id, $phone, $key, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriberByPhoneWithHttpInfo
     *
     * Get subscriber by phone
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $phone Phone of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriberByPhone'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriberByPhoneWithHttpInfo($list_id, $phone, $key = null, string $contentType = self::contentTypes['getSubscriberByPhone'][0])
    {
        $request = $this->getSubscriberByPhoneRequest($list_id, $phone, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriberByPhoneAsync
     *
     * Get subscriber by phone
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $phone Phone of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriberByPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberByPhoneAsync($list_id, $phone, $key = null, string $contentType = self::contentTypes['getSubscriberByPhone'][0])
    {
        return $this->getSubscriberByPhoneAsyncWithHttpInfo($list_id, $phone, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriberByPhoneAsyncWithHttpInfo
     *
     * Get subscriber by phone
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $phone Phone of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriberByPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberByPhoneAsyncWithHttpInfo($list_id, $phone, $key = null, string $contentType = self::contentTypes['getSubscriberByPhone'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\GetSubscriberByPhone200Response';
        $request = $this->getSubscriberByPhoneRequest($list_id, $phone, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriberByPhone'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $phone Phone of the subscriber to get (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriberByPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriberByPhoneRequest($list_id, $phone, $key = null, string $contentType = self::contentTypes['getSubscriberByPhone'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getSubscriberByPhone'
            );
        }

        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling getSubscriberByPhone'
            );
        }



        $resourcePath = '/lists/{list_id}/subscriber-by-phone/{phone}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }
        // path params
        if ($phone !== null) {
            $resourcePath = str_replace(
                '{' . 'phone' . '}',
                ObjectSerializer::toPathValue($phone),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscribers
     *
     * Get subscribers
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribers'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getSubscribers($list_id, $key = null, string $contentType = self::contentTypes['getSubscribers'][0])
    {
        $this->getSubscribersWithHttpInfo($list_id, $key, $contentType);
    }

    /**
     * Operation getSubscribersWithHttpInfo
     *
     * Get subscribers
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribers'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscribersWithHttpInfo($list_id, $key = null, string $contentType = self::contentTypes['getSubscribers'][0])
    {
        $request = $this->getSubscribersRequest($list_id, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscribersAsync
     *
     * Get subscribers
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribersAsync($list_id, $key = null, string $contentType = self::contentTypes['getSubscribers'][0])
    {
        return $this->getSubscribersAsyncWithHttpInfo($list_id, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscribersAsyncWithHttpInfo
     *
     * Get subscribers
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribersAsyncWithHttpInfo($list_id, $key = null, string $contentType = self::contentTypes['getSubscribers'][0])
    {
        $returnType = '';
        $request = $this->getSubscribersRequest($list_id, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscribers'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscribers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscribersRequest($list_id, $key = null, string $contentType = self::contentTypes['getSubscribers'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling getSubscribers'
            );
        }



        $resourcePath = '/lists/{list_id}/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSubscriberFromList
     *
     * Remove subscriber from list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriberFromList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response
     */
    public function removeSubscriberFromList($list_id, $key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['removeSubscriberFromList'][0])
    {
        list($response) = $this->removeSubscriberFromListWithHttpInfo($list_id, $key, $remove_subscriber_from_list_request, $contentType);
        return $response;
    }

    /**
     * Operation removeSubscriberFromListWithHttpInfo
     *
     * Remove subscriber from list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriberFromList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSubscriberFromListWithHttpInfo($list_id, $key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['removeSubscriberFromList'][0])
    {
        $request = $this->removeSubscriberFromListRequest($list_id, $key, $remove_subscriber_from_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeSubscriberFromListAsync
     *
     * Remove subscriber from list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriberFromList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriberFromListAsync($list_id, $key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['removeSubscriberFromList'][0])
    {
        return $this->removeSubscriberFromListAsyncWithHttpInfo($list_id, $key, $remove_subscriber_from_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSubscriberFromListAsyncWithHttpInfo
     *
     * Remove subscriber from list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriberFromList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriberFromListAsyncWithHttpInfo($list_id, $key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['removeSubscriberFromList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\RemoveSubscriberFromList200Response';
        $request = $this->removeSubscriberFromListRequest($list_id, $key, $remove_subscriber_from_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSubscriberFromList'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\RemoveSubscriberFromListRequest $remove_subscriber_from_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriberFromList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSubscriberFromListRequest($list_id, $key = null, $remove_subscriber_from_list_request = null, string $contentType = self::contentTypes['removeSubscriberFromList'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling removeSubscriberFromList'
            );
        }




        $resourcePath = '/lists/{list_id}/unsubscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_subscriber_from_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_subscriber_from_list_request));
            } else {
                $httpBody = $remove_subscriber_from_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showList
     *
     * Show list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\ShowList200Response
     */
    public function showList($list_id, $key = null, string $contentType = self::contentTypes['showList'][0])
    {
        list($response) = $this->showListWithHttpInfo($list_id, $key, $contentType);
        return $response;
    }

    /**
     * Operation showListWithHttpInfo
     *
     * Show list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\ShowList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function showListWithHttpInfo($list_id, $key = null, string $contentType = self::contentTypes['showList'][0])
    {
        $request = $this->showListRequest($list_id, $key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\ShowList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\ShowList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\ShowList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\ShowList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\ShowList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showListAsync
     *
     * Show list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showListAsync($list_id, $key = null, string $contentType = self::contentTypes['showList'][0])
    {
        return $this->showListAsyncWithHttpInfo($list_id, $key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showListAsyncWithHttpInfo
     *
     * Show list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showListAsyncWithHttpInfo($list_id, $key = null, string $contentType = self::contentTypes['showList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\ShowList200Response';
        $request = $this->showListRequest($list_id, $key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showList'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showListRequest($list_id, $key = null, string $contentType = self::contentTypes['showList'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling showList'
            );
        }



        $resourcePath = '/lists/{list_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateList
     *
     * Update list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateListRequest $update_list_request update_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\UpdateList200Response
     */
    public function updateList($list_id, $key = null, $update_list_request = null, string $contentType = self::contentTypes['updateList'][0])
    {
        list($response) = $this->updateListWithHttpInfo($list_id, $key, $update_list_request, $contentType);
        return $response;
    }

    /**
     * Operation updateListWithHttpInfo
     *
     * Update list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateListRequest $update_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateList'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\UpdateList200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListWithHttpInfo($list_id, $key = null, $update_list_request = null, string $contentType = self::contentTypes['updateList'][0])
    {
        $request = $this->updateListRequest($list_id, $key, $update_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\UpdateList200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\UpdateList200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\UpdateList200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\UpdateList200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\UpdateList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListAsync
     *
     * Update list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateListRequest $update_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListAsync($list_id, $key = null, $update_list_request = null, string $contentType = self::contentTypes['updateList'][0])
    {
        return $this->updateListAsyncWithHttpInfo($list_id, $key, $update_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListAsyncWithHttpInfo
     *
     * Update list
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateListRequest $update_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListAsyncWithHttpInfo($list_id, $key = null, $update_list_request = null, string $contentType = self::contentTypes['updateList'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\UpdateList200Response';
        $request = $this->updateListRequest($list_id, $key, $update_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateList'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateListRequest $update_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateListRequest($list_id, $key = null, $update_list_request = null, string $contentType = self::contentTypes['updateList'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling updateList'
            );
        }




        $resourcePath = '/lists/{list_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_list_request));
            } else {
                $httpBody = $update_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriber
     *
     * Update subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateSubscriberRequest $update_subscriber_request update_subscriber_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriber'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\UpdateSubscriber200Response
     */
    public function updateSubscriber($list_id, $key = null, $update_subscriber_request = null, string $contentType = self::contentTypes['updateSubscriber'][0])
    {
        list($response) = $this->updateSubscriberWithHttpInfo($list_id, $key, $update_subscriber_request, $contentType);
        return $response;
    }

    /**
     * Operation updateSubscriberWithHttpInfo
     *
     * Update subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateSubscriberRequest $update_subscriber_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriber'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\UpdateSubscriber200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriberWithHttpInfo($list_id, $key = null, $update_subscriber_request = null, string $contentType = self::contentTypes['updateSubscriber'][0])
    {
        $request = $this->updateSubscriberRequest($list_id, $key, $update_subscriber_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\UpdateSubscriber200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\UpdateSubscriber200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\UpdateSubscriber200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\UpdateSubscriber200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\UpdateSubscriber200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubscriberAsync
     *
     * Update subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateSubscriberRequest $update_subscriber_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriberAsync($list_id, $key = null, $update_subscriber_request = null, string $contentType = self::contentTypes['updateSubscriber'][0])
    {
        return $this->updateSubscriberAsyncWithHttpInfo($list_id, $key, $update_subscriber_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriberAsyncWithHttpInfo
     *
     * Update subscriber
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateSubscriberRequest $update_subscriber_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriberAsyncWithHttpInfo($list_id, $key = null, $update_subscriber_request = null, string $contentType = self::contentTypes['updateSubscriber'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\UpdateSubscriber200Response';
        $request = $this->updateSubscriberRequest($list_id, $key, $update_subscriber_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriber'
     *
     * @param  float $list_id ID of the List in form of an integer (required)
     * @param  string $key e.g. API_KEY (optional)
     * @param  \StejskyTom\Ecomail\Model\UpdateSubscriberRequest $update_subscriber_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscriberRequest($list_id, $key = null, $update_subscriber_request = null, string $contentType = self::contentTypes['updateSubscriber'][0])
    {

        // verify the required parameter 'list_id' is set
        if ($list_id === null || (is_array($list_id) && count($list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_id when calling updateSubscriber'
            );
        }




        $resourcePath = '/lists/{list_id}/update-subscriber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }

        // path params
        if ($list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'list_id' . '}',
                ObjectSerializer::toPathValue($list_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_subscriber_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_subscriber_request));
            } else {
                $httpBody = $update_subscriber_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewAllLists
     *
     * View all lists
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewAllLists'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \StejskyTom\Ecomail\Model\ViewAllLists200Response
     */
    public function viewAllLists($key = null, string $contentType = self::contentTypes['viewAllLists'][0])
    {
        list($response) = $this->viewAllListsWithHttpInfo($key, $contentType);
        return $response;
    }

    /**
     * Operation viewAllListsWithHttpInfo
     *
     * View all lists
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewAllLists'] to see the possible values for this operation
     *
     * @throws \StejskyTom\Ecomail\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \StejskyTom\Ecomail\Model\ViewAllLists200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewAllListsWithHttpInfo($key = null, string $contentType = self::contentTypes['viewAllLists'][0])
    {
        $request = $this->viewAllListsRequest($key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\StejskyTom\Ecomail\Model\ViewAllLists200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\StejskyTom\Ecomail\Model\ViewAllLists200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StejskyTom\Ecomail\Model\ViewAllLists200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StejskyTom\Ecomail\Model\ViewAllLists200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StejskyTom\Ecomail\Model\ViewAllLists200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewAllListsAsync
     *
     * View all lists
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewAllLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewAllListsAsync($key = null, string $contentType = self::contentTypes['viewAllLists'][0])
    {
        return $this->viewAllListsAsyncWithHttpInfo($key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewAllListsAsyncWithHttpInfo
     *
     * View all lists
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewAllLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewAllListsAsyncWithHttpInfo($key = null, string $contentType = self::contentTypes['viewAllLists'][0])
    {
        $returnType = '\StejskyTom\Ecomail\Model\ViewAllLists200Response';
        $request = $this->viewAllListsRequest($key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewAllLists'
     *
     * @param  string $key e.g. API_KEY (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewAllLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewAllListsRequest($key = null, string $contentType = self::contentTypes['viewAllLists'][0])
    {



        $resourcePath = '/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($key !== null) {
            $headerParams['key'] = ObjectSerializer::toHeaderValue($key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
